monitoring:
  release: external-prometheus
  namespace: prometheus
  # These values get rendered by the associated alerting template into
  # PrometheusRules objects, which are what Prometheus uses to determine
  # alerting configuration. See README.md for more information.
  prometheusAlerts:
    - alert: ContainerOOMKilled
      annotations:
        summary: Container OOMKilled
        description: |
          Container {{ $labels.container }} from pod {{ $labels.pod }} in namespace {{ $labels.namespace }} has been OOMKilled recently - consider adjusting pod limits.
      expr: |
        increase(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[5m]) >= 0
      for: 5m
      labels:
        severity: warning
  
  grafanaDashboards:
    - name: restarting-pods
      directory: /tmp/dashboards/Sandbox
    - name: k8s-views-pods
      directory: /tmp/dashboards/Kubernetes
    
kube-prometheus-stack:
  fullnameOverride: kappa-prometheus
  defaultRules:
    create: true
    rules:
      etcd: false
      kubeControllerManager: false
      kubeProxy: false

  alertmanager:
    # Note we configure AlertMgr via an AlertmanagerConfiguration - see
    # templates dir
    enabled: true
    service:
      type: LoadBalancer

  prometheus:
    service:
      type: LoadBalancer

  grafana:
    sidecar:
      dashboards:
        enabled: true
        provider:
          foldersFromFilesStructure: true
  
  kube-state-metrics:
    extraArgs:
      - --metric-labels-allowlist=pods=[app.kubernetes.io/name,app.kubernetes.io/version]
  
  kubeEtcd:
    enabled: false

  # The EKS control plane is not accessible from worker nodes
  kubeControllerManager:
    enabled: false

  # KubeProxy instances listen on localhost for metrics by default
  kubeProxy:
    enabled: false

  # The EKS control plane is not accessible from worker nodes
  kubeScheduler:
    enabled: false

  prometheus-node-exporter:
    hostRootFsMount:
      enabled: false